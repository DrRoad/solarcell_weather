sonnenscheindauer <- data.frame(tmp_wetterdaten$Datum, tmp_wetterdaten$Wert)
colnames(sonnenscheindauer)[1] <- "Datum"
colnames(sonnenscheindauer)[2] <- "sonnenscheindauer"
#tagesdurchschnittstemperatur
tmp_wetterdaten <- subset(wetterdaten, wetterdaten$Element == "Lufttemperatur Tagesmittel")
temperatur <- data.frame(tmp_wetterdaten$Datum, tmp_wetterdaten$Wert)
colnames(temperatur) <- c("Datum", "temperatur")
#wind
tmp_wetterdaten <- subset(wetterdaten, wetterdaten$Element == "Windspitze")
wind <- data.frame(tmp_wetterdaten$Datum, tmp_wetterdaten$Wert)
colnames(wind) <- c("Datum", "wind_geschwindigkeit")
#merge wetterdaten
tmp_w1 <- merge(sonnenscheindauer, temperatur)
tmp_w2 <- merge(tmp_w1, wind)
#combine dwd and my solar panel data and remove duplicated entries
tmp_w3 <- unique(tmp_w2)
wetter_solar_prod  <- merge(tmp_w3, mydata)
#get rid of unnecessary variables
remove(tmp_w1, tmp_w2, tmp_w3, tmp_wetterdaten)
#remove unwanted attributes
wetter_solar_prod <- subset(wetter_solar_prod, select = -c(Zählerstand.morgens, Zählerstand.abends))
plot(wetterdaten$Datum[wetterdaten$Element == "Sonnenscheindauer"], wetterdaten$Wert[wetterdaten$Element == "Sonnenscheindauer"], col = "red" , type = "o")
plot(wetter_solar_prod$sonnenscheindauer, wetter_solar_prod$Produktion)
fit_sonne_prod <- lm(wetter_solar_prod$Produktion ~ wetter_solar_prod$sonnenscheindauer)
abline(fit_sonne_prod, col = "red")
summary(fit_sonne_prod)
#confidence intervalle
prd <- predict(fit_sonne_prod,data.frame(lstat=(c(5,10,15))), interval="confidence")
prd2 <- predict(fit_sonne_prod,data.frame(lstat=(c(5,10,15))), interval="prediction")
lines(wetter_solar_prod$sonnenscheindauer,prd[,2],col="blue",lty=2)
lines(wetter_solar_prod$sonnenscheindauer,prd[,3],col="blue",lty=2)
lines(wetter_solar_prod$sonnenscheindauer,prd2[,2],col="green",lty=2)
lines(wetter_solar_prod$sonnenscheindauer,prd2[,3],col="green",lty=2)
remove(sonnenscheindauer, temperatur, wind)
attach(wetter_solar_prod)
fit_sonne_prod4 <- lm(Produktion ~ poly(sonnenscheindauer, 4, raw =T), data = wetter_solar_prod)
coef(summary(fit_sonne_prod4))
sonnlim <- range(sonnenscheindauer)
sonn.grid <- seq(from=sonnlim[1], to = sonnlim[2])
sonn.preds <- predict(fit_sonne_prod4, newdata = list(sonnenscheindauer = sonn.grid), se=T)
se.bands <- cbind(sonn.preds$fit + 2 * sonn.preds$se.fit, sonn.preds$fit - 2 * sonn.preds$se.fit)
# plot the fit
#par(mfrow=c(1,2),mar=c(4.5,4.5,1,1) ,oma=c(0,0,4,0))
plot(sonnenscheindauer, Produktion)
title("Degree-4 Polynomial", outer = F)
lines(sonn.grid, sonn.preds$fit, lwd=2, col = "blue")
matlines(sonn.grid, se.bands, lwd=1, col = "blue", lty=3)
knitr::opts_chunk$set(echo = TRUE)
#load solarzellen data
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
source("summary_se.R")
source("solar_auswertung.R")
dir_name = "solarzellen_data"
solarcell_files_names = list.files(path = dir_name, pattern="/*.csv")
solarcell_files_names<- paste(dir_name, solarcell_files_names, sep = "/")
solarcell_tbl <- data_frame("datum"=character(0), "zaehlerstand_morgens"= numeric(0), "zaehlerstand_abends" = numeric(0),"produktion"= numeric(0),"eigen_verbrauch"= numeric(0),"eingespeist"= numeric(0))
solarcell_tbl = lapply(solarcell_files_names, read_csv2) %>% bind_rows()
#using lubridate to make the 'Datum' column more usefull
solarcell_tbl$Datum <- dmy(solarcell_tbl$Datum)
solarcell_tbl$YEAR <- year(solarcell_tbl$Datum)
solarcell_tbl$MONTH <- month(solarcell_tbl$Datum)
solarcell_tbl$DAY <- day(solarcell_tbl$Datum)
solarcell_tbl_avg <- summarySE(solarcell_tbl, measurevar="Produktion", groupvars=c("YEAR","MONTH"))
#summary over for months
solarcell_tbl_avg %>%
group_by( MONTH) %>%
summarise_at(vars(Produktion), funs(mean,sd))
#summary over for year
solarcell_tbl_avg %>%
group_by(YEAR) %>%
summarise_at(vars(Produktion), funs(mean,sd))
solarcell_tbl$rating <- sapply(solarcell_tbl$Produktion, wetter)
y <- solarcell_tbl$Produktion
t <- 1:nrow(solarcell_tbl)
x <- solarcell_tbl$Datum
# sinus fit
#1
ssp <- spectrum(y)
per <- 1/ssp$freq[ssp$spec==max(ssp$spec)]
reslm <- lm(y ~ sin(2*pi/per*t)+cos(2*pi/per*t))
summary(reslm)
rg <- diff(range(y))
plot(y~t,ylim=c(min(y)-0.1*rg,max(y)+0.1*rg))
lines(fitted(reslm)~t,col=4,lty=1)   # dashed blue line is sin fit
# including 2nd harmonic really improves the fit
reslm2 <- lm(y ~ sin(2*pi/per*t)+cos(2*pi/per*t)+sin(4*pi/per*t)+cos(4*pi/per*t))
summary(reslm2)
lines(fitted(reslm2)~t,col=3)
#2 fft
raw.fft = fft(y)
ggplot(data = solarcell_tbl, aes(x = Datum, y = Produktion)) +
geom_point() +
geom_smooth(se=FALSE, method="lm", formula = y ~ sin(2*pi/per*x)+cos(2*pi/per*x))
solarcell_tbl$YEAR <- year(solarcell_tbl$Datum)
solarcell_tbl$MONTH <- month(solarcell_tbl$Datum)
solarcell_tbl$DAY <- day(solarcell_tbl$Datum)
ggplot(data = solarcell_tbl, aes(x = MONTH, y = Produktion )) +
geom_point() +
facet_wrap(~YEAR) +
geom_smooth(se=FALSE, method="lm", formula = y ~ sin(2*pi/per*x)+cos(2*pi/per*x)+sin(4*pi/per*x)+cos(4*pi/per*x))
ggplot(data = solarcell_tbl_avg, aes(x = MONTH, y = Produktion )) +
geom_bar(aes(fill=YEAR), position=position_dodge(.9), stat="identity") +
facet_wrap(~YEAR) +
geom_errorbar(aes(ymin=Produktion-se, ymax=Produktion+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
xx <-1:nrow(solarcell_tbl_avg)
ggplot(data = solarcell_tbl_avg, aes(x=xx, y = Produktion )) + geom_bar( stat="identity", width = 0.5)
ggplot(data = solarcell_tbl, aes(rating)) + geom_histogram(stat="count") + facet_wrap(~YEAR)
atm_condition <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
length_of_data <- nrow(data)
rating <- data[rating_colum]
tmp <- rating[1]
atmospheric_conditions_df <- data_frame("atm_condition", "duration")
for(i in 2:length_of_data) {
if(rating[i] == tmp){
counter <- counter+1
} else {
# add a new row
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
counter <- 1
}
tmp <- rating[i]
}
#don't forget the last entry
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atmospheric_conditions_df <- atm_condition(solarcell_tbl, "rating")
solarcell_tbl["rating"]
atm_condition <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
length_of_data <- nrow(data)
rating <- data[rating_colum]
tmp <- rating[1]
atmospheric_conditions_df <- data_frame("atm_condition", "duration")
for(i in 2:length_of_data) {
if(rating[i] == tmp){
counter <- counter+1
} else {
print(paste0("Leistung in rating: ", tmp))
print(paste0("zählerstand: ", counter) )
# add a new row
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
counter <- 1
}
tmp <- rating[i]
}
#don't forget the last entry
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atmospheric_conditions_df <- atm_condition(solarcell_tbl, "rating")
knitr::opts_chunk$set(echo = TRUE)
#load solarzellen data
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
source("summary_se.R")
source("solar_auswertung.R")
dir_name = "solarzellen_data"
solarcell_files_names = list.files(path = dir_name, pattern="/*.csv")
solarcell_files_names<- paste(dir_name, solarcell_files_names, sep = "/")
solarcell_tbl <- data_frame("datum"=character(0), "zaehlerstand_morgens"= numeric(0), "zaehlerstand_abends" = numeric(0),"produktion"= numeric(0),"eigen_verbrauch"= numeric(0),"eingespeist"= numeric(0))
solarcell_tbl = lapply(solarcell_files_names, read_csv2) %>% bind_rows()
#using lubridate to make the 'Datum' column more usefull
solarcell_tbl$Datum <- dmy(solarcell_tbl$Datum)
solarcell_tbl$YEAR <- year(solarcell_tbl$Datum)
solarcell_tbl$MONTH <- month(solarcell_tbl$Datum)
solarcell_tbl$DAY <- day(solarcell_tbl$Datum)
solarcell_tbl_avg <- summarySE(solarcell_tbl, measurevar="Produktion", groupvars=c("YEAR","MONTH"))
#summary over for months
solarcell_tbl_avg %>%
group_by( MONTH) %>%
summarise_at(vars(Produktion), funs(mean,sd))
#summary over for year
solarcell_tbl_avg %>%
group_by(YEAR) %>%
summarise_at(vars(Produktion), funs(mean,sd))
solarcell_tbl$rating <- sapply(solarcell_tbl$Produktion, wetter)
y <- solarcell_tbl$Produktion
t <- 1:nrow(solarcell_tbl)
x <- solarcell_tbl$Datum
# sinus fit
#1
ssp <- spectrum(y)
per <- 1/ssp$freq[ssp$spec==max(ssp$spec)]
reslm <- lm(y ~ sin(2*pi/per*t)+cos(2*pi/per*t))
summary(reslm)
rg <- diff(range(y))
plot(y~t,ylim=c(min(y)-0.1*rg,max(y)+0.1*rg))
lines(fitted(reslm)~t,col=4,lty=1)   # dashed blue line is sin fit
# including 2nd harmonic really improves the fit
reslm2 <- lm(y ~ sin(2*pi/per*t)+cos(2*pi/per*t)+sin(4*pi/per*t)+cos(4*pi/per*t))
summary(reslm2)
lines(fitted(reslm2)~t,col=3)
#2 fft
raw.fft = fft(y)
ggplot(data = solarcell_tbl, aes(x = Datum, y = Produktion)) +
geom_point() +
geom_smooth(se=FALSE, method="lm", formula = y ~ sin(2*pi/per*x)+cos(2*pi/per*x))
solarcell_tbl$YEAR <- year(solarcell_tbl$Datum)
solarcell_tbl$MONTH <- month(solarcell_tbl$Datum)
solarcell_tbl$DAY <- day(solarcell_tbl$Datum)
ggplot(data = solarcell_tbl, aes(x = MONTH, y = Produktion )) +
geom_point() +
facet_wrap(~YEAR) +
geom_smooth(se=FALSE, method="lm", formula = y ~ sin(2*pi/per*x)+cos(2*pi/per*x)+sin(4*pi/per*x)+cos(4*pi/per*x))
ggplot(data = solarcell_tbl_avg, aes(x = MONTH, y = Produktion )) +
geom_bar(aes(fill=YEAR), position=position_dodge(.9), stat="identity") +
facet_wrap(~YEAR) +
geom_errorbar(aes(ymin=Produktion-se, ymax=Produktion+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
xx <-1:nrow(solarcell_tbl_avg)
ggplot(data = solarcell_tbl_avg, aes(x=xx, y = Produktion )) + geom_bar( stat="identity", width = 0.5)
ggplot(data = solarcell_tbl, aes(rating)) + geom_histogram(stat="count") + facet_wrap(~YEAR)
atmospheric_conditions_df <- atm_condition(solarcell_tbl, "rating")
atmospheric_conditions_df <- atm_condition(solarcell_tbl, "rating")
atm_condition <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
length_of_data <- nrow(data)
rating <- data[rating_colum]
tmp <- rating[1]
atmospheric_conditions_df <- data_frame("atm_condition", "duration")
for(i in 2:length_of_data) {
if(rating[i] == tmp){
counter <- counter+1
} else {
print(paste0("Leistung in rating: ", tmp))
print(paste0("zählerstand: ", counter) )
# add a new row
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
counter <- 1
}
tmp <- rating[i]
}
#don't forget the last entry
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atm_condition <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
length_of_data <- nrow(data)
rating <- data[rating_colum]
tmp <- rating[1]
atmospheric_conditions_df <- data_frame("atm_condition", "duration")
# for(i in 2:length_of_data) {
#   if(rating[i] == tmp){
#     counter <- counter+1
#   } else {
#     print(paste0("Leistung in rating: ", tmp))
#     print(paste0("zählerstand: ", counter) )
#     # add a new row
#     atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
#     counter <- 1
#   }
#   tmp <- rating[i]
# }
# #don't forget the last entry
# atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
#new atmospheric condition analyzer
atm_condition <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
length_of_data <- nrow(data)
rating <- data[rating_colum]
tmp <- rating[1]
atmospheric_conditions_df <- data_frame("atm_condition", "duration")
# for(i in 2:length_of_data) {
#   if(rating[i] == tmp){
#     counter <- counter+1
#   } else {
#     print(paste0("Leistung in rating: ", tmp))
#     print(paste0("zählerstand: ", counter) )
#     # add a new row
#     atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
#     counter <- 1
#   }
#   tmp <- rating[i]
# }
# #don't forget the last entry
# atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atmospheric_conditions_df <- atm_condition(solarcell_tbl, "rating")
atm_condition <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
length_of_data <- nrow(data)
rating <- data[rating_colum]
tmp <- rating[1]
atmospheric_conditions_df <- data_frame("atm_condition", "duration")
for(i in 2:length_of_data) {
if(rating[i] == tmp){
counter <- counter+1
} else {
print(paste0("Leistung in rating: ", tmp))
print(paste0("zählerstand: ", counter) )
# add a new row
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
counter <- 1
}
tmp <- rating[i]
}
#don't forget the last entry
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atmospheric_conditions_df <- atm_condition(solarcell_tbl, "rating")
atm_condition2 <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
rating <- data[rating_colum]
length_of_data <- nrow(rating)
print(paste0("length_of_data: ", length_of_data))
tmp <- rating[1]
atmospheric_conditions_df <- data_frame("atm_condition", "duration")
for(i in 2:length_of_data) {
if(rating[i] == tmp){
counter <- counter+1
} else {
print(paste0("Leistung in rating: ", tmp))
print(paste0("zählerstand: ", counter) )
# add a new row
# atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
counter <- 1
}
tmp <- rating[i]
}
#don't forget the last entry
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atmospheric_conditions_df <- atm_condition2(solarcell_tbl, "rating")
atm_condition2 <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
rating <- data[rating_colum]
length_of_data <- nrow(rating)
print(paste0("length_of_data: ", length_of_data))
tmp <- rating[1]
print(paste0("tmp: ", tmp))
atmospheric_conditions_df <- data_frame("atm_condition", "duration")
for(i in 2:length_of_data) {
if(rating[i] == tmp){
counter <- counter+1
} else {
print(paste0("Leistung in rating: ", tmp))
print(paste0("zählerstand: ", counter) )
# add a new row
# atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
counter <- 1
}
tmp <- rating[i]
}
#don't forget the last entry
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atmospheric_conditions_df <- atm_condition2(solarcell_tbl, "rating")
ratty <- solarcell_tbl["rating"]
ratty[1]
ratty[1,]
atm_condition2 <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
rating <- data[rating_colum]
length_of_data <- nrow(rating)
print(paste0("length_of_data: ", length_of_data))
tmp <- rating[1,]
print(paste0("tmp: ", tmp))
atmospheric_conditions_df <- data_frame("atm_condition", "duration")
for(i in 2:length_of_data) {
if(rating[i] == tmp){
counter <- counter+1
} else {
print(paste0("Leistung in rating: ", tmp))
print(paste0("zählerstand: ", counter) )
# add a new row
# atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
counter <- 1
}
tmp <- rating[i]
}
#don't forget the last entry
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atmospheric_conditions_df <- atm_condition2(solarcell_tbl, "rating")
atm_condition2 <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
rating <- data[rating_colum]
length_of_data <- nrow(rating)
print(paste0("length_of_data: ", length_of_data))
tmp <- rating[1,]
print(paste0("tmp: ", tmp))
atmospheric_conditions_df <- data_frame("atm_condition", "duration")
for(i in 2:length_of_data) {
if(rating[i,] == tmp){
counter <- counter+1
} else {
print(paste0("Leistung in rating: ", tmp))
print(paste0("zählerstand: ", counter) )
# add a new row
# atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
counter <- 1
}
tmp <- rating[i]
}
#don't forget the last entry
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atmospheric_conditions_df <- atm_condition2(solarcell_tbl, "rating")
atm_condition2 <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
rating <- data[rating_colum]
length_of_data <- nrow(rating)
print(paste0("length_of_data: ", length_of_data))
tmp <- rating[1,]
print(paste0("tmp: ", tmp))
atmospheric_conditions_df <- data_frame("atm_condition", "duration")
for(i in 2:length_of_data) {
if(rating[i,] == tmp){
counter <- counter+1
} else {
print(paste0("Leistung in rating: ", tmp))
print(paste0("zählerstand: ", counter) )
# add a new row
# atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
counter <- 1
}
tmp <- rating[i,]
}
#don't forget the last entry
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atmospheric_conditions_df <- atm_condition2(solarcell_tbl, "rating")
atm_condition2 <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
rating <- data[rating_colum]
length_of_data <- nrow(rating)
tmp <- rating[1,]
atmospheric_conditions_df <- data_frame("atm_condition", "duration")
for(i in 2:length_of_data) {
if(rating[i,] == tmp){
counter <- counter+1
} else {
# add a new row
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
counter <- 1
}
tmp <- rating[i,]
}
#don't forget the last entry
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atmospheric_conditions_df <- atm_condition2(solarcell_tbl, "rating")
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill=atm_condition) + geom_histogram(position="identity", binwidth=.5)
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill=atm_condition) + geom_histogram(position="identity", binwidth=.5)
)######################################## old stuff #######################################
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill=atm_condition)) + geom_histogram(position="identity", binwidth=.5)
rm(atm_condition())
knitr::opts_chunk$set(echo = TRUE)
#load solarzellen data
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
source("summary_se.R")
source("solar_auswertung.R")
knitr::opts_chunk$set(echo = TRUE)
#load solarzellen data
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
source("summary_se.R")
source("solar_auswertung.R")
knitr::opts_chunk$set(echo = TRUE)
#load solarzellen data
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
source("summary_se.R")
source("solar_auswertung.R")
knitr::opts_chunk$set(echo = TRUE)
#load solarzellen data
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
source("summary_se.R")
source("solar_auswertung.R")

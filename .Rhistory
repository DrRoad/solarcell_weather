library(dplyr)
library(ggplot2)
library(lubridate)
source("summary_se.R")
source("solar_auswertung.R")
knitr::opts_chunk$set(echo = TRUE)
#load solarzellen data
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
source("summary_se.R")
source("solar_auswertung.R")
dir_name = "solarzellen_data"
solarcell_files_names = list.files(path = dir_name, pattern="/*.csv")
solarcell_files_names<- paste(dir_name, solarcell_files_names, sep = "/")
solarcell_tbl <- data_frame("datum"=character(0), "zaehlerstand_morgens"= numeric(0), "zaehlerstand_abends" = numeric(0),"produktion"= numeric(0),"eigen_verbrauch"= numeric(0),"eingespeist"= numeric(0))
solarcell_tbl = lapply(solarcell_files_names, read_csv2) %>% bind_rows()
#using lubridate to make the 'Datum' column more usefull
solarcell_tbl$Datum <- dmy(solarcell_tbl$Datum)
solarcell_tbl$YEAR <- year(solarcell_tbl$Datum)
solarcell_tbl$MONTH <- month(solarcell_tbl$Datum)
solarcell_tbl$DAY <- day(solarcell_tbl$Datum)
solarcell_tbl_avg <- summarySE(solarcell_tbl, measurevar="Produktion", groupvars=c("YEAR","MONTH"))
#summary over for months
solarcell_tbl_avg %>%
group_by( MONTH) %>%
summarise_at(vars(Produktion), funs(mean,sd))
#summary over for year
solarcell_tbl_avg %>%
group_by(YEAR) %>%
summarise_at(vars(Produktion), funs(mean,sd))
solarcell_tbl$rating <- sapply(solarcell_tbl$Produktion, wetter)
y <- solarcell_tbl$Produktion
t <- 1:nrow(solarcell_tbl)
x <- solarcell_tbl$Datum
# sinus fit
#1
ssp <- spectrum(y)
per <- 1/ssp$freq[ssp$spec==max(ssp$spec)]
reslm <- lm(y ~ sin(2*pi/per*t)+cos(2*pi/per*t))
summary(reslm)
rg <- diff(range(y))
plot(y~t,ylim=c(min(y)-0.1*rg,max(y)+0.1*rg))
lines(fitted(reslm)~t,col=4,lty=1)   # dashed blue line is sin fit
# including 2nd harmonic really improves the fit
reslm2 <- lm(y ~ sin(2*pi/per*t)+cos(2*pi/per*t)+sin(4*pi/per*t)+cos(4*pi/per*t))
summary(reslm2)
lines(fitted(reslm2)~t,col=3)
#2 fft
raw.fft = fft(y)
ggplot(data = solarcell_tbl, aes(x = Datum, y = Produktion)) +
geom_point() +
geom_smooth(se=FALSE, method="lm", formula = y ~ sin(2*pi/per*x)+cos(2*pi/per*x))
solarcell_tbl$YEAR <- year(solarcell_tbl$Datum)
solarcell_tbl$MONTH <- month(solarcell_tbl$Datum)
solarcell_tbl$DAY <- day(solarcell_tbl$Datum)
ggplot(data = solarcell_tbl, aes(x = MONTH, y = Produktion )) +
geom_point() +
facet_wrap(~YEAR) +
geom_smooth(se=FALSE, method="lm", formula = y ~ sin(2*pi/per*x)+cos(2*pi/per*x)+sin(4*pi/per*x)+cos(4*pi/per*x))
ggplot(data = solarcell_tbl_avg, aes(x = MONTH, y = Produktion )) +
geom_bar(aes(fill=YEAR), position=position_dodge(.9), stat="identity") +
facet_wrap(~YEAR) +
geom_errorbar(aes(ymin=Produktion-se, ymax=Produktion+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
xx <-1:nrow(solarcell_tbl_avg)
ggplot(data = solarcell_tbl_avg, aes(x=xx, y = Produktion )) + geom_bar( stat="identity", width = 0.5)
ggplot(data = solarcell_tbl, aes(rating)) + geom_histogram(stat="count") + facet_wrap(~YEAR)
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill = atm_condition)) + geom_histogram(binwidth=.5, position = "identity")
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill = atmospheric_conditions_df$"atm_condition")) + geom_histogram(binwidth=.5, position = "identity")
atm_condition_fn <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
rating <- data[rating_colum]
length_of_data <- nrow(rating)
tmp <- rating[1,]
atmospheric_conditions_df <- data_frame("atm_condition", "duration" = as.numeric())
for(i in 2:length_of_data) {
if(rating[i,] == tmp){
counter <- counter+1
} else {
# add a new row
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
counter <- 1
}
tmp <- rating[i,]
}
#don't forget the last entry
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill = atmospheric_conditions_df$"atm_condition")) + geom_histogram(binwidth=.5, position = "identity")
#########
levels(atmospheric_conditions_df$"atm_condition")
levels(atmospheric_conditions_df$"atm_condition")
atmospheric_conditions_df
atmospheric_conditions_df$"atm_condition" <- factor(atmospheric_conditions_df$"atm_condition")
atm_condition_fn <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
rating <- data[rating_colum]
length_of_data <- nrow(rating)
tmp <- rating[1,]
atmospheric_conditions_df <- data_frame(atm_condition, duration = as.numeric())
for(i in 2:length_of_data) {
if(rating[i,] == tmp){
counter <- counter+1
} else {
# add a new row
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
counter <- 1
}
tmp <- rating[i,]
}
#don't forget the last entry
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
atm_condition_fn <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
rating <- data[rating_colum]
length_of_data <- nrow(rating)
tmp <- rating[1,]
atmospheric_conditions_df <- data_frame(atm_condition, duration)
for(i in 2:length_of_data) {
if(rating[i,] == tmp){
counter <- counter+1
} else {
# add a new row
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
counter <- 1
}
tmp <- rating[i,]
}
#don't forget the last entry
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
knitr::opts_chunk$set(echo = TRUE)
#load solarzellen data
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
source("summary_se.R")
source("solar_auswertung.R")
dir_name = "solarzellen_data"
solarcell_files_names = list.files(path = dir_name, pattern="/*.csv")
solarcell_files_names<- paste(dir_name, solarcell_files_names, sep = "/")
solarcell_tbl <- data_frame("datum"=character(0), "zaehlerstand_morgens"= numeric(0), "zaehlerstand_abends" = numeric(0),"produktion"= numeric(0),"eigen_verbrauch"= numeric(0),"eingespeist"= numeric(0))
solarcell_tbl = lapply(solarcell_files_names, read_csv2) %>% bind_rows()
#using lubridate to make the 'Datum' column more usefull
solarcell_tbl$Datum <- dmy(solarcell_tbl$Datum)
solarcell_tbl$YEAR <- year(solarcell_tbl$Datum)
solarcell_tbl$MONTH <- month(solarcell_tbl$Datum)
solarcell_tbl$DAY <- day(solarcell_tbl$Datum)
solarcell_tbl_avg <- summarySE(solarcell_tbl, measurevar="Produktion", groupvars=c("YEAR","MONTH"))
#summary over for months
solarcell_tbl_avg %>%
group_by( MONTH) %>%
summarise_at(vars(Produktion), funs(mean,sd))
#summary over for year
solarcell_tbl_avg %>%
group_by(YEAR) %>%
summarise_at(vars(Produktion), funs(mean,sd))
solarcell_tbl$rating <- sapply(solarcell_tbl$Produktion, wetter)
y <- solarcell_tbl$Produktion
t <- 1:nrow(solarcell_tbl)
x <- solarcell_tbl$Datum
# sinus fit
#1
ssp <- spectrum(y)
per <- 1/ssp$freq[ssp$spec==max(ssp$spec)]
reslm <- lm(y ~ sin(2*pi/per*t)+cos(2*pi/per*t))
summary(reslm)
rg <- diff(range(y))
plot(y~t,ylim=c(min(y)-0.1*rg,max(y)+0.1*rg))
lines(fitted(reslm)~t,col=4,lty=1)   # dashed blue line is sin fit
# including 2nd harmonic really improves the fit
reslm2 <- lm(y ~ sin(2*pi/per*t)+cos(2*pi/per*t)+sin(4*pi/per*t)+cos(4*pi/per*t))
summary(reslm2)
lines(fitted(reslm2)~t,col=3)
#2 fft
raw.fft = fft(y)
ggplot(data = solarcell_tbl, aes(x = Datum, y = Produktion)) +
geom_point() +
geom_smooth(se=FALSE, method="lm", formula = y ~ sin(2*pi/per*x)+cos(2*pi/per*x))
solarcell_tbl$YEAR <- year(solarcell_tbl$Datum)
solarcell_tbl$MONTH <- month(solarcell_tbl$Datum)
solarcell_tbl$DAY <- day(solarcell_tbl$Datum)
ggplot(data = solarcell_tbl, aes(x = MONTH, y = Produktion )) +
geom_point() +
facet_wrap(~YEAR) +
geom_smooth(se=FALSE, method="lm", formula = y ~ sin(2*pi/per*x)+cos(2*pi/per*x)+sin(4*pi/per*x)+cos(4*pi/per*x))
ggplot(data = solarcell_tbl_avg, aes(x = MONTH, y = Produktion )) +
geom_bar(aes(fill=YEAR), position=position_dodge(.9), stat="identity") +
facet_wrap(~YEAR) +
geom_errorbar(aes(ymin=Produktion-se, ymax=Produktion+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
xx <-1:nrow(solarcell_tbl_avg)
ggplot(data = solarcell_tbl_avg, aes(x=xx, y = Produktion )) + geom_bar( stat="identity", width = 0.5)
ggplot(data = solarcell_tbl, aes(rating)) + geom_histogram(stat="count") + facet_wrap(~YEAR)
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
atm_condition_fn <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
rating <- data[rating_colum]
length_of_data <- nrow(rating)
tmp <- rating[1,]
atmospheric_conditions_df <- data_frame(atm_condition = factor(), duration = numeric())
for(i in 2:length_of_data) {
if(rating[i,] == tmp){
counter <- counter+1
} else {
# add a new row
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
counter <- 1
}
tmp <- rating[i,]
}
#don't forget the last entry
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
atm_condition_fn <- function(data, rating_colum ) {
#a couple of temp variables
counter <- 1
rating <- data[rating_colum]
length_of_data <- nrow(rating)
tmp <- rating[1,]
atmospheric_conditions_df <- data_frame(atm_condition = character(), duration = numeric())
for(i in 2:length_of_data) {
if(rating[i,] == tmp){
counter <- counter+1
} else {
# add a new row
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
counter <- 1
}
tmp <- rating[i,]
}
#don't forget the last entry
atmospheric_conditions_df[nrow(atmospheric_conditions_df) + 1,] = c(tmp, counter)
return(atmospheric_conditions_df)
}
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
#########
levels(atmospheric_conditions_df$atm_condition)
atmospheric_conditions_df$atm_condition <- factor(atmospheric_conditions_df$atm_condition)
#########
levels(atmospheric_conditions_df$atm_condition)
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill = atm_condition)) + geom_histogram(position = "identity")
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
atmospheric_conditions_df$atm_condition <- factor(atmospheric_conditions_df$atm_condition)
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill = atm_condition)) + geom_histogram(position = "dodge")
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
atmospheric_conditions_df$atm_condition <- factor(atmospheric_conditions_df$atm_condition)
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill = atm_condition)) + geom_histogram(binwidth=.5, alpha=.5, position = "identity")
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
atmospheric_conditions_df$atm_condition <- factor(atmospheric_conditions_df$atm_condition)
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill = atm_condition)) + geom_histogram(binwidth=.5, alpha=.5, position = "dodge")
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
atmospheric_conditions_df$atm_condition <- factor(atmospheric_conditions_df$atm_condition)
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill = atm_condition)) + geom_histogram(binwidth=.5, alpha=.5, position = "dodge") +
scale_x_continuous(breaks = round(seq(min(duration), max(duration), by = 0.5),1))
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
atmospheric_conditions_df$atm_condition <- factor(atmospheric_conditions_df$atm_condition)
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill = atm_condition)) + geom_histogram(binwidth=.5, alpha=.5, position = "dodge") +
scale_x_continuous(breaks = round(seq(min(atmospheric_conditions_df$duration), max(atmospheric_conditions_df$duration), by = 0.5),1))
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
atmospheric_conditions_df$atm_condition <- factor(atmospheric_conditions_df$atm_condition)
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill = atm_condition)) + geom_histogram(binwidth=.5, alpha=.5, position = "dodge") +
scale_x_continuous(breaks = round(seq(min(atmospheric_conditions_df$duration), max(atmospheric_conditions_df$duration), by = 1),1))
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
atmospheric_conditions_df$atm_condition <- factor(atmospheric_conditions_df$atm_condition)
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill = atm_condition)) + geom_histogram(binwidth=.8, position = "dodge") +
scale_x_continuous(breaks = round(seq(min(atmospheric_conditions_df$duration), max(atmospheric_conditions_df$duration), by = 1),1))
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
atmospheric_conditions_df$atm_condition <- factor(atmospheric_conditions_df$atm_condition)
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill = atm_condition)) + geom_histogram(binwidth=.5, position = "dodge") +
scale_x_continuous(breaks = round(seq(min(atmospheric_conditions_df$duration), max(atmospheric_conditions_df$duration), by = 1),1))
knitr::opts_chunk$set(echo = TRUE)
#load solarzellen data
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
source("summary_se.R")
source("solar_auswertung.R")
dir_name = "solarzellen_data"
solarcell_files_names = list.files(path = dir_name, pattern="/*.csv")
solarcell_files_names<- paste(dir_name, solarcell_files_names, sep = "/")
solarcell_tbl <- data_frame("datum"=character(0), "zaehlerstand_morgens"= numeric(0), "zaehlerstand_abends" = numeric(0),"produktion"= numeric(0),"eigen_verbrauch"= numeric(0),"eingespeist"= numeric(0))
solarcell_tbl = lapply(solarcell_files_names, read_csv2) %>% bind_rows()
#using lubridate to make the 'Datum' column more usefull
solarcell_tbl$Datum <- dmy(solarcell_tbl$Datum)
solarcell_tbl$YEAR <- year(solarcell_tbl$Datum)
solarcell_tbl$MONTH <- month(solarcell_tbl$Datum)
solarcell_tbl$DAY <- day(solarcell_tbl$Datum)
solarcell_tbl_avg <- summarySE(solarcell_tbl, measurevar="Produktion", groupvars=c("YEAR","MONTH"))
#summary over for months
solarcell_tbl_avg %>%
group_by( MONTH) %>%
summarise_at(vars(Produktion), funs(mean,sd))
#summary over for year
solarcell_tbl_avg %>%
group_by(YEAR) %>%
summarise_at(vars(Produktion), funs(mean,sd))
solarcell_tbl$rating <- sapply(solarcell_tbl$Produktion, wetter)
y <- solarcell_tbl$Produktion
t <- 1:nrow(solarcell_tbl)
x <- solarcell_tbl$Datum
# sinus fit
#1
ssp <- spectrum(y)
per <- 1/ssp$freq[ssp$spec==max(ssp$spec)]
reslm <- lm(y ~ sin(2*pi/per*t)+cos(2*pi/per*t))
summary(reslm)
rg <- diff(range(y))
plot(y~t,ylim=c(min(y)-0.1*rg,max(y)+0.1*rg))
lines(fitted(reslm)~t,col=4,lty=1)   # dashed blue line is sin fit
# including 2nd harmonic really improves the fit
reslm2 <- lm(y ~ sin(2*pi/per*t)+cos(2*pi/per*t)+sin(4*pi/per*t)+cos(4*pi/per*t))
summary(reslm2)
lines(fitted(reslm2)~t,col=3)
#2 fft
raw.fft = fft(y)
ggplot(data = solarcell_tbl, aes(x = Datum, y = Produktion)) +
geom_point() +
geom_smooth(se=FALSE, method="lm", formula = y ~ sin(2*pi/per*x)+cos(2*pi/per*x))
solarcell_tbl$YEAR <- year(solarcell_tbl$Datum)
solarcell_tbl$MONTH <- month(solarcell_tbl$Datum)
solarcell_tbl$DAY <- day(solarcell_tbl$Datum)
ggplot(data = solarcell_tbl, aes(x = MONTH, y = Produktion )) +
geom_point() +
facet_wrap(~YEAR) +
geom_smooth(se=FALSE, method="lm", formula = y ~ sin(2*pi/per*x)+cos(2*pi/per*x)+sin(4*pi/per*x)+cos(4*pi/per*x))
ggplot(data = solarcell_tbl_avg, aes(x = MONTH, y = Produktion )) +
geom_bar(aes(fill=YEAR), position=position_dodge(.9), stat="identity") +
facet_wrap(~YEAR) +
geom_errorbar(aes(ymin=Produktion-se, ymax=Produktion+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
xx <-1:nrow(solarcell_tbl_avg)
ggplot(data = solarcell_tbl_avg, aes(x=xx, y = Produktion )) + geom_bar( stat="identity", width = 0.5)
ggplot(data = solarcell_tbl, aes(rating)) + geom_histogram(stat="count") + facet_wrap(~YEAR)
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
atmospheric_conditions_df$atm_condition <- factor(atmospheric_conditions_df$atm_condition)
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill = atm_condition)) + geom_histogram(binwidth=.5, position = "dodge") +
scale_x_continuous(breaks = round(seq(min(atmospheric_conditions_df$duration), max(atmospheric_conditions_df$duration), by = 1),1))
knitr::opts_chunk$set(echo = TRUE)
#load solarzellen data
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
source("summary_se.R")
source("solar_auswertung.R")
dir_name = "solarzellen_data"
solarcell_files_names = list.files(path = dir_name, pattern="/*.csv")
solarcell_files_names<- paste(dir_name, solarcell_files_names, sep = "/")
solarcell_tbl <- data_frame("datum"=character(0), "zaehlerstand_morgens"= numeric(0), "zaehlerstand_abends" = numeric(0),"produktion"= numeric(0),"eigen_verbrauch"= numeric(0),"eingespeist"= numeric(0))
solarcell_tbl = lapply(solarcell_files_names, read_csv2) %>% bind_rows()
#using lubridate to make the 'Datum' column more usefull
solarcell_tbl$Datum <- dmy(solarcell_tbl$Datum)
solarcell_tbl$YEAR <- year(solarcell_tbl$Datum)
solarcell_tbl$MONTH <- month(solarcell_tbl$Datum)
solarcell_tbl$DAY <- day(solarcell_tbl$Datum)
solarcell_tbl_avg <- summarySE(solarcell_tbl, measurevar="Produktion", groupvars=c("YEAR","MONTH"))
#summary over for months
solarcell_tbl_avg %>%
group_by( MONTH) %>%
summarise_at(vars(Produktion), funs(mean,sd))
#summary over for year
solarcell_tbl_avg %>%
group_by(YEAR) %>%
summarise_at(vars(Produktion), funs(mean,sd))
solarcell_tbl$rating <- sapply(solarcell_tbl$Produktion, wetter)
y <- solarcell_tbl$Produktion
t <- 1:nrow(solarcell_tbl)
x <- solarcell_tbl$Datum
# sinus fit
#1
ssp <- spectrum(y)
per <- 1/ssp$freq[ssp$spec==max(ssp$spec)]
reslm <- lm(y ~ sin(2*pi/per*t)+cos(2*pi/per*t))
summary(reslm)
rg <- diff(range(y))
plot(y~t,ylim=c(min(y)-0.1*rg,max(y)+0.1*rg))
lines(fitted(reslm)~t,col=4,lty=1)   # dashed blue line is sin fit
# including 2nd harmonic really improves the fit
reslm2 <- lm(y ~ sin(2*pi/per*t)+cos(2*pi/per*t)+sin(4*pi/per*t)+cos(4*pi/per*t))
summary(reslm2)
lines(fitted(reslm2)~t,col=3)
#2 fft
raw.fft = fft(y)
ggplot(data = solarcell_tbl, aes(x = Datum, y = Produktion)) +
geom_point() +
geom_smooth(se=FALSE, method="lm", formula = y ~ sin(2*pi/per*x)+cos(2*pi/per*x))
solarcell_tbl$YEAR <- year(solarcell_tbl$Datum)
solarcell_tbl$MONTH <- month(solarcell_tbl$Datum)
solarcell_tbl$DAY <- day(solarcell_tbl$Datum)
ggplot(data = solarcell_tbl, aes(x = MONTH, y = Produktion )) +
geom_point() +
facet_wrap(~YEAR) +
geom_smooth(se=FALSE, method="lm", formula = y ~ sin(2*pi/per*x)+cos(2*pi/per*x)+sin(4*pi/per*x)+cos(4*pi/per*x))
ggplot(data = solarcell_tbl_avg, aes(x = MONTH, y = Produktion )) +
geom_bar(aes(fill=YEAR), position=position_dodge(.9), stat="identity") +
facet_wrap(~YEAR) +
geom_errorbar(aes(ymin=Produktion-se, ymax=Produktion+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
xx <-1:nrow(solarcell_tbl_avg)
ggplot(data = solarcell_tbl_avg, aes(x=xx, y = Produktion )) + geom_bar( stat="identity", width = 0.5)
ggplot(data = solarcell_tbl, aes(rating)) + geom_histogram(stat="count") + facet_wrap(~YEAR)
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
atmospheric_conditions_df$atm_condition <- factor(atmospheric_conditions_df$atm_condition)
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill = atm_condition)) + geom_histogram(binwidth=.5, position = "dodge") +
scale_x_continuous(breaks = round(seq(min(atmospheric_conditions_df$duration), max(atmospheric_conditions_df$duration), by = 1),1))
ggplot(data = atmospheric_conditions_df, aes(x=duration)) + geom_histogram(binwidth=.5, position = "dodge") +
+facet_grid(~atm_condition)
ggplot(data = atmospheric_conditions_df, aes(x=duration)) + geom_histogram(binwidth=.5, position = "dodge") +
+facet_wrap(~atm_condition)
ggplot(data = atmospheric_conditions_df, aes(x=duration)) + geom_histogram(binwidth=.5, position = "identity") +
+facet_wrap(~atm_condition)
ggplot(data = atmospheric_conditions_df, aes(x=duration)) + geom_histogram(binwidth=.5, position = "identity") +
facet_wrap(~atm_condition)
scale_x_continuous(breaks = round(seq(min(atmospheric_conditions_df$duration), max(atmospheric_conditions_df$duration), by = 1),1))
knitr::opts_chunk$set(echo = TRUE)
#load solarzellen data
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
source("summary_se.R")
source("solar_auswertung.R")
dir_name = "solarzellen_data"
solarcell_files_names = list.files(path = dir_name, pattern="/*.csv")
solarcell_files_names<- paste(dir_name, solarcell_files_names, sep = "/")
solarcell_tbl <- data_frame("datum"=character(0), "zaehlerstand_morgens"= numeric(0), "zaehlerstand_abends" = numeric(0),"produktion"= numeric(0),"eigen_verbrauch"= numeric(0),"eingespeist"= numeric(0))
solarcell_tbl = lapply(solarcell_files_names, read_csv2) %>% bind_rows()
#using lubridate to make the 'Datum' column more usefull
solarcell_tbl$Datum <- dmy(solarcell_tbl$Datum)
solarcell_tbl$YEAR <- year(solarcell_tbl$Datum)
solarcell_tbl$MONTH <- month(solarcell_tbl$Datum)
solarcell_tbl$DAY <- day(solarcell_tbl$Datum)
solarcell_tbl_avg <- summarySE(solarcell_tbl, measurevar="Produktion", groupvars=c("YEAR","MONTH"))
#summary over for months
solarcell_tbl_avg %>%
group_by( MONTH) %>%
summarise_at(vars(Produktion), funs(mean,sd))
#summary over for year
solarcell_tbl_avg %>%
group_by(YEAR) %>%
summarise_at(vars(Produktion), funs(mean,sd))
solarcell_tbl$rating <- sapply(solarcell_tbl$Produktion, wetter)
y <- solarcell_tbl$Produktion
t <- 1:nrow(solarcell_tbl)
x <- solarcell_tbl$Datum
# sinus fit
#1
ssp <- spectrum(y)
per <- 1/ssp$freq[ssp$spec==max(ssp$spec)]
reslm <- lm(y ~ sin(2*pi/per*t)+cos(2*pi/per*t))
summary(reslm)
rg <- diff(range(y))
plot(y~t,ylim=c(min(y)-0.1*rg,max(y)+0.1*rg))
lines(fitted(reslm)~t,col=4,lty=1)   # dashed blue line is sin fit
# including 2nd harmonic really improves the fit
reslm2 <- lm(y ~ sin(2*pi/per*t)+cos(2*pi/per*t)+sin(4*pi/per*t)+cos(4*pi/per*t))
summary(reslm2)
lines(fitted(reslm2)~t,col=3)
#2 fft
raw.fft = fft(y)
ggplot(data = solarcell_tbl, aes(x = Datum, y = Produktion)) +
geom_point() +
geom_smooth(se=FALSE, method="lm", formula = y ~ sin(2*pi/per*x)+cos(2*pi/per*x))
solarcell_tbl$YEAR <- year(solarcell_tbl$Datum)
solarcell_tbl$MONTH <- month(solarcell_tbl$Datum)
solarcell_tbl$DAY <- day(solarcell_tbl$Datum)
ggplot(data = solarcell_tbl, aes(x = MONTH, y = Produktion )) +
geom_point() +
facet_wrap(~YEAR) +
geom_smooth(se=FALSE, method="lm", formula = y ~ sin(2*pi/per*x)+cos(2*pi/per*x)+sin(4*pi/per*x)+cos(4*pi/per*x))
ggplot(data = solarcell_tbl_avg, aes(x = MONTH, y = Produktion )) +
geom_bar(aes(fill=YEAR), position=position_dodge(.9), stat="identity") +
facet_wrap(~YEAR) +
geom_errorbar(aes(ymin=Produktion-se, ymax=Produktion+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
xx <-1:nrow(solarcell_tbl_avg)
ggplot(data = solarcell_tbl_avg, aes(x=xx, y = Produktion )) + geom_bar( stat="identity", width = 0.5)
ggplot(data = solarcell_tbl, aes(rating)) + geom_histogram(stat="count") + facet_wrap(~YEAR)
atmospheric_conditions_df <- atm_condition_fn(solarcell_tbl, "rating")
atmospheric_conditions_df$atm_condition <- factor(atmospheric_conditions_df$atm_condition)
ggplot(data = atmospheric_conditions_df, aes(x=duration, fill = atm_condition)) + geom_histogram(binwidth=.5, position = "dodge") +
scale_x_continuous(breaks = round(seq(min(atmospheric_conditions_df$duration), max(atmospheric_conditions_df$duration), by = 1),1))
ggplot(data = atmospheric_conditions_df, aes(x=duration)) + geom_histogram(binwidth=.5, position = "identity") +
facet_wrap(~atm_condition)
scale_x_continuous(breaks = round(seq(min(atmospheric_conditions_df$duration), max(atmospheric_conditions_df$duration), by = 1),1))
install.packages(c("acs", "backports", "BH", "broom", "callr", "curl", "DBI", "dbplyr", "digest", "forcats", "geosphere", "glue", "haven", "hms", "htmlwidgets", "httpuv", "knitr", "lazyeval", "lubridate", "MASS", "mgcv", "nlme", "openssl", "pillar", "Rcpp", "RCurl", "reprex", "reshape2", "rlang", "rmarkdown", "rpart", "rprojroot", "rsconnect", "selectr", "slam", "sp", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "viridisLite", "XML", "xml2", "yaml"))
